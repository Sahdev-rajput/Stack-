#include <iostream>
using namespace std;
class Node
{
public:
	int data;
	struct Node* next;
};
class Stack
{
private: 
	Node* top;
public:
	Stack();
	void Push(int x);
	int pop();
	void display();
	int peek(int pos);
	bool isempty();
	bool isfull();
};
Stack::Stack()
{
	top = NULL;
}
void Stack::Push(int x)
{
	Node* t = new Node;
	if (t == NULL)
	{
		cout << "Stack is full" << endl;
	}
	else
	{
		t->data = x;
		t->next = top;
		top = t;
	}
}
int Stack::pop()
{
	int x = -1;
	if (top == NULL)
	{
		cout << "Stack is empty" << endl;
	}
	else
	{
		Node* t = top;
		top = top->next;
		x = t->data;
		delete t;
	}
	return x;
}
void Stack::display()
{
	Node* p = top;
	while (p)
	{
		cout << p->data << " ";
		p = p->next;
	}
}
int Stack::peek(int pos)
{
	Node* p = top;
	for (int i = 0; i < pos - 1 && p != NULL; i++)
	{
		p = p->next;
	}
	if (p == NULL)
	{
		cout << "Invalid index" << endl;
	}
	else
	{
		return p->data;

	}
	return -1;
}
bool Stack::isempty()
{
	if (top == NULL)
	{
		return true;
	}
	else
	{
		return false;
	}
}
bool Stack::isfull() {
	Node* t = new Node;
	if (t == NULL)
	{
		return true;
	}
	else
	{
		return false;
	}
}
int main()
{
	Stack s;
	s.Push(12);
	s.Push(13);
	s.Push(27);
	s.Push(29);
	s.display();
	cout << endl;
	cout << s.pop() << endl;
	cout << s.peek(3) << endl;
}
